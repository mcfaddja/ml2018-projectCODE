import readline
import scipy.sparse
import scipy
import numpy as np
import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from sklearn import metrics
from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.ensemble import AdaBoostClassifier, AdaBoostRegressor
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor
from sklearn import svm
from sklearn.svm import SVC, LinearSVC
from sklearn.svm import SVR, LinearSVR
from sklearn import linear_model
likes = pd.read_csv("/Users/jamster/data/training/relation/relation.csv")
likesUIDs = likes.ix[:,1].values
likesLIDs = likes.ix[:,2].values
lsLikesUIDs = likesUIDs.tolist()
lsLikesLIDs = likesLIDs.tolist()
setLikesUIDs = set(lsLikesUIDs)
setLikesLIDs = set(lsLikesLIDs)
unqLikesUIDs = (list(setLikesUIDs))
unqLikesLIDs = (list(setLikesLIDs))
allLikesLS = [lsLikesUIDs, [str(x) for x in lsLikesLIDs]]
allLikesLS = list(map(list, zip(*allLikesLS)))
aDictLikes2 = {}
for aUID in unqLikesUIDs:
	aDictLikes2[aUID]=[]
for row in allLikesLS:
	aDictLikes2[row[0]].append(row[1])
combDICT = {}
for uid in unqLikesUIDs:
	tmpDICT={}
	tmpLS = aDictLikes2[uid]
	for row in tmpLS:
		tmpDICT[str(row)]=1
	combDICT[uid]=tmpDICT
tryTHIS=[]
for uid in unqLikesUIDs:
	tryTHIS.append(combDICT[uid])
v = DictVectorizer()
likesMAT=v.fit_transform(tryTHIS)
profilesDF=pd.read_csv("/Users/jamster/data/training/profile/profile.csv")
profiles=profilesDF.ix[:,1:9].values.copy()
profilesLSo=profiles.tolist().copy()
profilesLS=[]
for row in profilesLSo:
	tmpLS=row
	tmpAGE=row[1]
	if tmpAGE < 25:
		tmpLS[1]=1
	elif tmpAGE < 35:
		tmpLS[1]=2
	elif tmpAGE < 50:
		tmpLS[1]=3
	else:
		tmpLS[1]=4
	profilesLS.append(tmpLS)
profsTOlikes=[]
for i in range(9500):
	profsTOlikes.append([])
for row in profilesLS:
	tmpIND = unqLikesUIDs.index(row[0])
	profsTOlikes[tmpIND]=row
profsTOlikes1=list(map(list, zip(*profsTOlikes)))
agesARR=np.array(profsTOlikes1[1])
sexsARR=np.array(profsTOlikes1[2])
opesARR=np.array(profsTOlikes1[3])
consARR=np.array(profsTOlikes1[4])
extsARR=np.array(profsTOlikes1[5])
agrsARR=np.array(profsTOlikes1[6])
neusARR=np.array(profsTOlikes1[7])
scores = {'randForr': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'adaBoost': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'bernNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'gausNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'multNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
#'bagging': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'gradBoost': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'svm': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'linearSVM': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []}  }
gausNB = GaussianNB()
bernNB = BernoulliNB()
multNB = MultinomialNB()
# gausNBage = GaussianNB()
# bernNBage = BernoulliNB()
# multNBage = MultinomialNB()
# gausNBsex = GaussianNB()
# bernNBsex = BernoulliNB()
# multNBsex = MultinomialNB()
# gausNBope = GaussianNB()
# bernNBope = BernoulliNB()
# multNBope = MultinomialNB()
# gausNBcon = GaussianNB()
# bernNBcon = BernoulliNB()
# multNBcon = MultinomialNB()
# gausNBext = GaussianNB()
# bernNBext = BernoulliNB()
# multNBext = MultinomialNB()
# gausNBagr = GaussianNB()
# bernNBagr = BernoulliNB()
# multNBagr = MultinomialNB()
# gausNBneu = GaussianNB()
# bernNBneu = BernoulliNB()
# multNBneu = MultinomialNB()
attribs = [agesARR, sexsARR, opesARR, consARR, extsARR, agrsARR, neusARR]
labels = ['age', 'sex', 'ope', 'con', 'ext', 'agr', 'neu']
kf = KFold(n_splits=4)
randForrC = RandomForestClassifier(n_jobs=7, n_estimators=15)
randForrR = RandomForestRegressor(n_jobs=7, n_estimators=10)
#adaBoostC = AdaBoostClassifier(n_estimators=50)
#gausNB = GaussianNB()
bernNB = BernoulliNB()
bayesRidge = linear_model.BayesianRidge()
#sdgC = linear_model.SGDClassifier()
#sdgR = linear_model.SGDRegressor()
#linear_model.Ridge()
#multNB = MultinomialNB()
#gradBoostC =  GradientBoostingClassifier(n_estimators=100, max_depth=1000)
svmC = svm.SVC()
svmR = svm.SVR()
svmLc = svm.LinearSVC()
svmLr = svm.LinearSVR()
for train_index, test_index in kf.split(agesARR):
	print(a)
for row in profilesLS:
	tmpIND = unqLikesUIDs.index(row[0])
	profsTOlikes[tmpIND]=row
profsTOlikes1=list(map(list, zip(*profsTOlikes)))
agesARR=np.array(profsTOlikes1[1])
sexsARR=np.array(profsTOlikes1[2])
opesARR=np.array(profsTOlikes1[3])
consARR=np.array(profsTOlikes1[4])
extsARR=np.array(profsTOlikes1[5])
agrsARR=np.array(profsTOlikes1[6])
neusARR=np.array(profsTOlikes1[7])
scores = {'randForr': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'adaBoost': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'bernNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'gausNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'multNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
#'bagging': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'gradBoost': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'svm': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'linearSVM': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []}  }
gausNB = GaussianNB()
bernNB = BernoulliNB()
multNB = MultinomialNB()
# gausNBage = GaussianNB()
# bernNBage = BernoulliNB()
# multNBage = MultinomialNB()
# gausNBsex = GaussianNB()
# bernNBsex = BernoulliNB()
# multNBsex = MultinomialNB()
# gausNBope = GaussianNB()
# bernNBope = BernoulliNB()
# multNBope = MultinomialNB()
# gausNBcon = GaussianNB()
# bernNBcon = BernoulliNB()
# multNBcon = MultinomialNB()
# gausNBext = GaussianNB()
# bernNBext = BernoulliNB()
# multNBext = MultinomialNB()
# gausNBagr = GaussianNB()
# bernNBagr = BernoulliNB()
# multNBagr = MultinomialNB()
# gausNBneu = GaussianNB()
# bernNBneu = BernoulliNB()
# multNBneu = MultinomialNB()
attribs = [agesARR, sexsARR, opesARR, consARR, extsARR, agrsARR, neusARR]
profsTOlikes1=list(map(list, zip(*profsTOlikes)))
agesARR=np.array(profsTOlikes1[1])
sexsARR=np.array(profsTOlikes1[2])
opesARR=np.array(profsTOlikes1[3])
consARR=np.array(profsTOlikes1[4])
extsARR=np.array(profsTOlikes1[5])
agrsARR=np.array(profsTOlikes1[6])
neusARR=np.array(profsTOlikes1[7])
import readline
import scipy.sparse
import scipy
import numpy as np
import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from sklearn import metrics
from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.ensemble import AdaBoostClassifier, AdaBoostRegressor
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor
from sklearn import svm
from sklearn.svm import SVC, LinearSVC
from sklearn.svm import SVR, LinearSVR
from sklearn import linear_model
likes = pd.read_csv("/Users/jamster/data/training/relation/relation.csv")
likesUIDs = likes.ix[:,1].values
likesLIDs = likes.ix[:,2].values
lsLikesUIDs = likesUIDs.tolist()
lsLikesLIDs = likesLIDs.tolist()
setLikesUIDs = set(lsLikesUIDs)
setLikesLIDs = set(lsLikesLIDs)
unqLikesUIDs = (list(setLikesUIDs))
unqLikesLIDs = (list(setLikesLIDs))
allLikesLS = [lsLikesUIDs, [str(x) for x in lsLikesLIDs]]
allLikesLS = list(map(list, zip(*allLikesLS)))
aDictLikes2 = {}
for aUID in unqLikesUIDs:
	aDictLikes2[aUID]=[]
    
for row in allLikesLS:
	aDictLikes2[row[0]].append(row[1])
combDICT = {}
for uid in unqLikesUIDs:
	tmpDICT={}
	tmpLS = aDictLikes2[uid]
	for row in tmpLS:
		tmpDICT[str(row)]=1
	combDICT[uid]=tmpDICT
tryTHIS=[]
for uid in unqLikesUIDs:
	tryTHIS.append(combDICT[uid])
v = DictVectorizer()
likesMAT=v.fit_transform(tryTHIS)
profilesDF=pd.read_csv("/Users/jamster/data/training/profile/profile.csv")
profiles=profilesDF.ix[:,1:9].values.copy()
profilesLSo=profiles.tolist().copy()
profilesLS=[]
for row in profilesLSo:
	tmpLS=row
	tmpAGE=row[1]
	if tmpAGE < 25:
		tmpLS[1]=1
	elif tmpAGE < 35:
		tmpLS[1]=2
	elif tmpAGE < 50:
		tmpLS[1]=3
	else:
		tmpLS[1]=4
	profilesLS.append(tmpLS)
profsTOlikes=[]
for i in range(9500):
	profsTOlikes.append([])
for row in profilesLS:
	tmpIND = unqLikesUIDs.index(row[0])
	profsTOlikes[tmpIND]=row
profsTOlikes1=list(map(list, zip(*profsTOlikes)))
agesARR=np.array(profsTOlikes1[1])
sexsARR=np.array(profsTOlikes1[2])
opesARR=np.array(profsTOlikes1[3])
consARR=np.array(profsTOlikes1[4])
extsARR=np.array(profsTOlikes1[5])
agrsARR=np.array(profsTOlikes1[6])
import readline
import scipy.sparse
import scipy
import numpy as np
import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from sklearn import metrics
from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.ensemble import AdaBoostClassifier, AdaBoostRegressor
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor
from sklearn import svm
from sklearn.svm import SVC, LinearSVC
from sklearn.svm import SVR, LinearSVR
from sklearn import linear_model
likes = pd.read_csv("/Users/jamster/data/training/relation/relation.csv")
likesUIDs = likes.ix[:,1].values
likesLIDs = likes.ix[:,2].values
lsLikesUIDs = likesUIDs.tolist()
lsLikesLIDs = likesLIDs.tolist()
setLikesUIDs = set(lsLikesUIDs)
setLikesLIDs = set(lsLikesLIDs)
unqLikesUIDs = (list(setLikesUIDs))
unqLikesLIDs = (list(setLikesLIDs))
allLikesLS = [lsLikesUIDs, [str(x) for x in lsLikesLIDs]]
import scipy.sparse
import scipy
import numpy as np
import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from sklearn import metrics
from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.ensemble import AdaBoostClassifier, AdaBoostRegressor
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor
from sklearn import svm
from sklearn.svm import SVC, LinearSVC
from sklearn.svm import SVR, LinearSVR
from sklearn import linear_model
likes = pd.read_csv("/Users/jamster/data/training/relation/relation.csv")
import readline
import scipy.sparse
import scipy
import numpy as np
import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from sklearn import metrics
from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.ensemble import AdaBoostClassifier, AdaBoostRegressor
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor
from sklearn import svm
from sklearn.svm import SVC, LinearSVC
from sklearn.svm import SVR, LinearSVR
from sklearn import linear_model
likes = pd.read_csv("/home/jamster/data/training/relation/relation.csv")
likesUIDs = likes.ix[:,1].values
likesLIDs = likes.ix[:,2].values
lsLikesUIDs = likesUIDs.tolist()
lsLikesLIDs = likesLIDs.tolist()
setLikesUIDs = set(lsLikesUIDs)
setLikesLIDs = set(lsLikesLIDs)
unqLikesUIDs = (list(setLikesUIDs))
unqLikesLIDs = (list(setLikesLIDs))
allLikesLS = [lsLikesUIDs, [str(x) for x in lsLikesLIDs]]
allLikesLS = list(map(list, zip(*allLikesLS)))
aDictLikes2 = {}
for aUID in unqLikesUIDs:
	aDictLikes2[aUID]=[]
for row in allLikesLS:
	aDictLikes2[row[0]].append(row[1])
combDICT = {}
for uid in unqLikesUIDs:
	tmpDICT={}
	tmpLS = aDictLikes2[uid]
	for row in tmpLS:
		tmpDICT[str(row)]=1
	combDICT[uid]=tmpDICT
tryTHIS=[]
for uid in unqLikesUIDs:
	tryTHIS.append(combDICT[uid])
v = DictVectorizer()
likesMAT=v.fit_transform(tryTHIS)
profilesDF=pd.read_csv("/home/jamster/data/training/profile/profile.csv")
profiles=profilesDF.ix[:,1:9].values.copy()
profilesLSo=profiles.tolist().copy()
profilesLS=[]
for row in profilesLSo:
	tmpLS=row
	tmpAGE=row[1]
	if tmpAGE < 25:
		tmpLS[1]=1
	elif tmpAGE < 35:
		tmpLS[1]=2
	elif tmpAGE < 50:
		tmpLS[1]=3
	else:
		tmpLS[1]=4
	profilesLS.append(tmpLS)
profsTOlikes=[]
for i in range(9500):
	profsTOlikes.append([])
for row in profilesLS:
	tmpIND = unqLikesUIDs.index(row[0])
	profsTOlikes[tmpIND]=row
profsTOlikes1=list(map(list, zip(*profsTOlikes)))
agesARR=np.array(profsTOlikes1[1])
sexsARR=np.array(profsTOlikes1[2])
opesARR=np.array(profsTOlikes1[3])
consARR=np.array(profsTOlikes1[4])
extsARR=np.array(profsTOlikes1[5])
agrsARR=np.array(profsTOlikes1[6])
neusARR=np.array(profsTOlikes1[7])
scores = {'randForr': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'adaBoost': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'bernNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'gausNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'multNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
#'bagging': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'gradBoost': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'svm': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'linearSVM': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []}  }
gausNB = GaussianNB()
bernNB = BernoulliNB()
multNB = MultinomialNB()
# gausNBage = GaussianNB()
# bernNBage = BernoulliNB()
# multNBage = MultinomialNB()
# gausNBsex = GaussianNB()
# bernNBsex = BernoulliNB()
# multNBsex = MultinomialNB()
# gausNBope = GaussianNB()
# bernNBope = BernoulliNB()
# multNBope = MultinomialNB()
# gausNBcon = GaussianNB()
# bernNBcon = BernoulliNB()
# multNBcon = MultinomialNB()
# gausNBext = GaussianNB()
# bernNBext = BernoulliNB()
# multNBext = MultinomialNB()
# gausNBagr = GaussianNB()
# bernNBagr = BernoulliNB()
# multNBagr = MultinomialNB()
# gausNBneu = GaussianNB()
# bernNBneu = BernoulliNB()
# multNBneu = MultinomialNB()
attribs = [agesARR, sexsARR, opesARR, consARR, extsARR, agrsARR, neusARR]
labels = ['age', 'sex', 'ope', 'con', 'ext', 'agr', 'neu']
kf = KFold(n_splits=4)
for train_index, test_index in kf.split(agesARR):
	print(a)
for train_index, test_index in kf.split(agesARR):
	print('a')
randForrR = RandomForestRegressor(n_jobs=7, n_estimators=10)
randForrR.fit(trainX, yTrain)
trainX=likesMAT[train_index,:]
yTrain=workARR[train_index]
testX=likesMAT[test_index,:]
trainX=opesARR[train_index,:]
trainX=likesMAT[train_index,:]
yTrain=opesARR[train_index]
testX=likesMAT[test_index,:]
yTest=opesARR[test_index]
randForrR.fit(trainX, yTrain)
randForrR = RandomForestRegressor(n_jobs=30, n_estimators=10)
randForrR.fit(trainX, yTrain)
print(randForrR.score(testX, yTest))
svmR = svm.SVR()
svmR.fit(trainX, yTrain)
svmR.score(testX, yTest)
svmLr = svm.LinearSVR()
svmR.fit(trainX, yTrain)
randForrR = RandomForestRegressor(n_jobs=30, n_estimators=50)
randForrR.fit(trainX, yTrain)
print(randForrR.score(testX, yTest))
randForrR = RandomForestRegressor(n_jobs=32, n_estimators=100)
randForrR.fit(trainX, yTrain)
print(randForrR.score(testX, yTest))
opeRANDfor=RandomForestRegressor(n_jobs=32, n_estimators=150)
opeRANDfor.fit(likesMAT, opesARR)
quit()
import readline
import scipy.sparse
import scipy
import numpy as np
import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from sklearn import metrics
from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.ensemble import AdaBoostClassifier, AdaBoostRegressor
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor
from sklearn import svm
from sklearn.svm import SVC, LinearSVC
from sklearn.svm import SVR, LinearSVR
from sklearn import linear_model
likes = pd.read_csv("/home/jamster/data/training/relation/relation.csv")
likesUIDs = likes.ix[:,1].values
likesLIDs = likes.ix[:,2].values
lsLikesUIDs = likesUIDs.tolist()
lsLikesLIDs = likesLIDs.tolist()
setLikesUIDs = set(lsLikesUIDs)
setLikesLIDs = set(lsLikesLIDs)
unqLikesUIDs = (list(setLikesUIDs))
unqLikesLIDs = (list(setLikesLIDs))
allLikesLS = [lsLikesUIDs, [str(x) for x in lsLikesLIDs]]
allLikesLS = list(map(list, zip(*allLikesLS)))
aDictLikes2 = {}
for aUID in unqLikesUIDs:
	aDictLikes2[aUID]=[]
for row in allLikesLS:
	aDictLikes2[row[0]].append(row[1])
combDICT = {}
for uid in unqLikesUIDs:
	tmpDICT={}
	tmpLS = aDictLikes2[uid]
	for row in tmpLS:
		tmpDICT[str(row)]=1
	combDICT[uid]=tmpDICT
tryTHIS=[]
for uid in unqLikesUIDs:
	tryTHIS.append(combDICT[uid])
v = DictVectorizer()
likesMAT=v.fit_transform(tryTHIS)
profilesDF=pd.read_csv("/home/jamster/data/training/profile/profile.csv")
profiles=profilesDF.ix[:,1:9].values.copy()
profilesLSo=profiles.tolist().copy()
profilesLS=[]
for row in profilesLSo:
	tmpLS=row
	tmpAGE=row[1]
	if tmpAGE < 25:
		tmpLS[1]=1
	elif tmpAGE < 35:
		tmpLS[1]=2
	elif tmpAGE < 50:
		tmpLS[1]=3
	else:
		tmpLS[1]=4
	profilesLS.append(tmpLS)
profsTOlikes=[]
for i in range(9500):
	profsTOlikes.append([])
for row in profilesLS:
	tmpIND = unqLikesUIDs.index(row[0])
	profsTOlikes[tmpIND]=row
profsTOlikes1=list(map(list, zip(*profsTOlikes)))
agesARR=np.array(profsTOlikes1[1])
sexsARR=np.array(profsTOlikes1[2])
opesARR=np.array(profsTOlikes1[3])
consARR=np.array(profsTOlikes1[4])
extsARR=np.array(profsTOlikes1[5])
agrsARR=np.array(profsTOlikes1[6])
neusARR=np.array(profsTOlikes1[7])
scores = {'randForr': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'adaBoost': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'bernNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'gausNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'multNB': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
#'bagging': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'gradBoost': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'svm': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []},
'linearSVM': {'age': [], 'sex': [], 'ope': [], 'con': [], 'ext': [], 'agr': [], 'neu': []}  }
gausNB = GaussianNB()
bernNB = BernoulliNB()
multNB = MultinomialNB()
# gausNBage = GaussianNB()
# bernNBage = BernoulliNB()
# multNBage = MultinomialNB()
# gausNBsex = GaussianNB()
# bernNBsex = BernoulliNB()
# multNBsex = MultinomialNB()
# gausNBope = GaussianNB()
# bernNBope = BernoulliNB()
# multNBope = MultinomialNB()
# gausNBcon = GaussianNB()
# bernNBcon = BernoulliNB()
# multNBcon = MultinomialNB()
# gausNBext = GaussianNB()
# bernNBext = BernoulliNB()
# multNBext = MultinomialNB()
# gausNBagr = GaussianNB()
# bernNBagr = BernoulliNB()
# multNBagr = MultinomialNB()
# gausNBneu = GaussianNB()
# bernNBneu = BernoulliNB()
# multNBneu = MultinomialNB()
attribs = [agesARR, sexsARR, opesARR, consARR, extsARR, agrsARR, neusARR]
labels = ['age', 'sex', 'ope', 'con', 'ext', 'agr', 'neu']
kf = KFold(n_splits=4)
from sklearn.externals import joblib
opeRANDfor=RandomForestRegressor(n_jobs=32, n_estimators=500)
opeRANDfor.fit(likesMAT, opesARR)
from sklearn.externals import joblib
opeRANDfor=RandomForestRegressor(n_jobs=32, n_estimators=100)
opeRANDfor.fit(likesMAT, opesARR)
joblib.dump(opeRANDfor, ‘/home/jamster/Desktop/opeRANDfor’)
conRANDfor=RandomForestRegressor(n_jobs=32, n_estimators=100)
conRANDfor.fit(likesMAT, consARR)
joblib.dump(conRANDfor, ‘/home/jamster/Desktop/conRANDfor’)
extRANDfor=RandomForestRegressor(n_jobs=32, n_estimators=100)
extRANDfor.fit(likesMAT, extsARR)
joblib.dump(extRANDfor, ‘/home/jamster/Desktop/extRANDfor’)
agrRANDfor=RandomForestRegressor(n_jobs=32, n_estimators=100)
agrRANDfor.fit(likesMAT, agrsARR)
joblib.dump(agrRANDfor, ‘/home/jamster/Desktop/agrRANDfor’)
neuRANDfor=RandomForestRegressor(n_jobs=32, n_estimators=100)
neuRANDfor.fit(likesMAT, neusARR)
joblib.dump(neuRANDfor, ‘/home/jamster/Desktop/neuRANDfor’)
opeRANDfor=RandomForestRegressor(n_jobs=32, n_estimators=10000)
opeRANDfor=RandomForestRegressor(n_jobs=30, n_estimators=5000)
time opeRANDfor.fit(likesMAT, opesARR)
%timeit
import timeit
%timeit
timeit.timeit(opeRANDfor.fit(likesMAT, opesARR))
